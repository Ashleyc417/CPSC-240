     1                                  ;Author: Ashley Chan
     2                                  ;Date: 09/05/2023
     3                                  ;Program Name: Assignment 01 - Las Vegas
     4                                  
     5                                  ;Declarations
     6                                      extern printf                                   ;External C function for writing to standard output device
     7                                      extern scanf                                    ;External C function for reading from standard output device
     8                                      extern exit                                     ;Enternal C keyword to terminate program
     9                                      global las_vegas                                ;Allowing las_vegas function to be used externally
    10                                  
    11                                  ;Initialized Constants / Constant Variables
    12                                  segment .data
    13                                      ;Printf formats
    14 00000000 257300                      string_format db "%s", 0        ;s - string
    15 00000003 256C6600                    float_format db "%lf", 0        ;lf - 64 bit float
    16 00000007 256600                      decimal_format db "%f", 0       ;f - 32 bit float
    17                                  
    18                                      ;Total Distance from CSUF -> Las Vegas
    19 0000000A 0000000000B06F40            total_distance dq 253.5
    20                                  
    21                                      ;Prompts for user input
    22 00000012 506C6561736520656E-         prompt1 db "Please enter the speed for the initial segment of the trip (mph): ", 0
    22 0000001B 746572207468652073-
    22 00000024 7065656420666F7220-
    22 0000002D 74686520696E697469-
    22 00000036 616C207365676D656E-
    22 0000003F 74206F662074686520-
    22 00000048 7472697020286D7068-
    22 00000051 293A2000           
    23 00000055 466F7220686F77206D-         prompt2 db "For how many miles will you maintain this average speed? ", 0
    23 0000005E 616E79206D696C6573-
    23 00000067 2077696C6C20796F75-
    23 00000070 206D61696E7461696E-
    23 00000079 207468697320617665-
    23 00000082 726167652073706565-
    23 0000008B 643F2000           
    24 0000008F 576861742077696C6C-         prompt3 db "What will be your speed during the final segment of the trip (mph)? ", 0
    24 00000098 20626520796F757220-
    24 000000A1 737065656420647572-
    24 000000AA 696E67207468652066-
    24 000000B3 696E616C207365676D-
    24 000000BC 656E74206F66207468-
    24 000000C5 65207472697020286D-
    24 000000CE 7068293F2000       
    25 000000D4 0A596F757220617665-         output1 db 10, "Your average speed will be %lf mph", 10, 0
    25 000000DD 726167652073706565-
    25 000000E6 642077696C6C206265-
    25 000000EF 20256C66206D70680A-
    25 000000F8 00                 
    26 000000F9 54686520746F74616C-         output2 db "The total travel time will be %lf hours", 10, 10, 0
    26 00000102 2074726176656C2074-
    26 0000010B 696D652077696C6C20-
    26 00000114 626520256C6620686F-
    26 0000011D 7572730A0A00       
    27                                  
    28                                      ;Invalid Response
    29 00000123 0A00                        invalid_message0 db "", 10, 0
    30 00000125 416E20696E76616C69-         invalid_message1 db "An invalid speed was entered. Please run the program again and enter correct data.", 10, 10, 0
    30 0000012E 642073706565642077-
    30 00000137 617320656E74657265-
    30 00000140 642E20506C65617365-
    30 00000149 2072756E2074686520-
    30 00000152 70726F6772616D2061-
    30 0000015B 6761696E20616E6420-
    30 00000164 656E74657220636F72-
    30 0000016D 726563742064617461-
    30 00000176 2E0A0A00           
    31 0000017A 596F75722061766572-         invalid_message2 db "Your average speed was not calculated.", 10, 0
    31 00000183 616765207370656564-
    31 0000018C 20776173206E6F7420-
    31 00000195 63616C63756C617465-
    31 0000019E 642E0A00           
    32 000001A2 54686520746F74616C-         invalid_message3 db "The total travel time was not calculated.", 10, 0
    32 000001AB 2074726176656C2074-
    32 000001B4 696D6520776173206E-
    32 000001BD 6F742063616C63756C-
    32 000001C6 617465642E0A00     
    33                                      
    34                                      ;Zero to Check Validity
    35 000001CD 00000000                    zero dd 0
    36                                  
    37                                  ;Store Memory Locations and Mutable Variables (bss - "Block Starting Symbols")
    38                                  segment .bss                                        ;resq - "reserve quadword" aka 64 bits of memory
    39 00000000 ????????????????            speed1 resq 1                                   ;Reserve 64 bits - for initial speed
    40 00000008 ????????????????            speed2 resq 1                                   ;Reserve 64 bits - for final speed
    41 00000010 ????????????????            dist1 resq 1                                    ;Reserve 64 bits - for inital distance traveled
    42 00000018 ????????????????            dist2 resq 1                                    ;Reserve 64 bits - for final distance traveled
    43 00000020 ????????????????            time1 resq 1                                    ;Reserve 64 bits - for distance of segment1
    44 00000028 ????????????????            time2 resq 1                                    ;Reserve 64 bits - for distance of segment2
    45 00000030 ????????????????            total_time resq 1                               ;Reserve 64 bits - for trip's total time
    46 00000038 ????????????????            avg_speed resq 1                                ;Reserve 64 bits - for avg speed during trip
    47                                  
    48                                  ;Code Logic/Execution
    49                                  segment .text
    50                                      ;Function to quit the program once an invalid input is received.
    51                                      stop_program:
    52                                  
    53                                          ;Output invalid message
    54 00000000 B800000000                      mov qword rax, 0
    55 00000005 50                              push rax
    56 00000006 48BF-                           mov rdi, invalid_message0
    56 00000008 [2301000000000000] 
    57 00000010 E8(00000000)                    call printf
    58 00000015 58                              pop rax
    59                                  
    60 00000016 B800000000                      mov qword rax, 0
    61 0000001B 50                              push rax
    62 0000001C 48BF-                           mov rdi, invalid_message1
    62 0000001E [2501000000000000] 
    63 00000026 E8(00000000)                    call printf
    64 0000002B 58                              pop rax
    65                                  
    66 0000002C B800000000                      mov qword rax, 0
    67 00000031 50                              push rax
    68 00000032 48BF-                           mov rdi, invalid_message2
    68 00000034 [7A01000000000000] 
    69 0000003C E8(00000000)                    call printf
    70 00000041 58                              pop rax
    71                                  
    72 00000042 B800000000                      mov qword rax, 0
    73 00000047 50                              push rax
    74 00000048 48BF-                           mov rdi, invalid_message3
    74 0000004A [A201000000000000] 
    75 00000052 E8(00000000)                    call printf
    76 00000057 58                              pop rax
    77                                  
    78                                          ;Terminate Program
    79 00000058 F20F100425-                     movsd xmm0, qword [total_distance]
    79 0000005D [0A000000]         
    80 00000061 C3                              ret
    81                                  
    82                                      ;Start of Las Vegas Function
    83                                      las_vegas:
    84                                  
    85                                          ;=== FIRST INPUT ====================================================================================
    86                                          ;Prompt user for Speed of 1st segment
    87 00000062 B800000000                      mov qword rax, 0                            ;Allocate 64 bits of memory on the stack for rax
    88 00000067 50                              push rax                                    ;push rax to the stack
    89 00000068 48BF-                           mov rdi, prompt1                            ;Move prompt1 into rdi
    89 0000006A [1200000000000000] 
    90 00000072 E8(00000000)                    call printf                                 ;Print prompt1
    91 00000077 58                              pop rax                                     ;Deallocate memory rax was using
    92                                  
    93                                          ;Read/Store user input (speed1)
    94 00000078 48BF-                           mov rdi, float_format                       ;Move float_format into rdi
    94 0000007A [0300000000000000] 
    95 00000082 48BE-                           mov rsi, speed1                             ;Move speed1 into rsi
    95 00000084 [0000000000000000] 
    96 0000008C B800000000                      mov qword rax, 0                            ;Allocate 64 bits of memory on the stack for rax
    97 00000091 50                              push rax                                    ;push rax to the stack
    98 00000092 E8(00000000)                    call scanf                                  ;Grab user input 
    99 00000097 58                              pop rax                                     ;Deallocate memory rax was using
   100                                          
   101                                          ;Check for Validity (speed1 < or == 0)
   102 00000098 F20F100425-                     movsd xmm0, qword [speed1]                  ;Move dist1 into xmm0
   102 0000009D [00000000]         
   103 000000A1 660F2E0425-                     ucomisd xmm0, qword [zero]                  ;Check if speed1 > 0
   103 000000A6 [CD010000]         
   104 000000AA 0F8650FFFFFF                    jbe stop_program                            ;Jump (if below or equal) to stop_program function
   105                                  
   106                                          ;=== SECOND INPUT ===================================================================================
   107                                          ;Prompt user for Distance of 1st segment
   108 000000B0 B800000000                      mov qword rax, 0                            ;Allocate 64 bits of memory on the stack for rax
   109 000000B5 50                              push rax                                    ;Set rax to the stack
   110 000000B6 48BF-                           mov rdi, prompt2                            ;move prompt2 into rdi
   110 000000B8 [5500000000000000] 
   111 000000C0 E8(00000000)                    call printf                                 ;Print prompt1
   112 000000C5 58                              pop rax                                     ;Deallocate memory rax was using
   113                                  
   114                                          ;Read/Store user input (dist1)
   115 000000C6 48BF-                           mov rdi, float_format                       ;Move float_format into rdi
   115 000000C8 [0300000000000000] 
   116 000000D0 48BE-                           mov rsi, dist1                              ;Move dist1 into rsi
   116 000000D2 [1000000000000000] 
   117 000000DA B800000000                      mov qword rax, 0                            ;Allocate 64 bits of memory on the stack for rax
   118 000000DF 50                              push rax                                    ;push rax to the stack
   119 000000E0 E8(00000000)                    call scanf                                  ;Grab user input
   120 000000E5 58                              pop rax                                     ;Deallocate memory rax was using
   121                                  
   122                                          ;Check for Validity (dist1 < or == 0)
   123 000000E6 F20F100425-                     movsd xmm0, qword [dist1]                  ;Move dist1 into xmm0
   123 000000EB [10000000]         
   124 000000EF 660F2E0425-                     ucomisd xmm0, qword [zero]                  ;Check if dist1 > 0
   124 000000F4 [CD010000]         
   125 000000F8 0F8602FFFFFF                    jbe stop_program                            ;Jump (if below or equal) to stop_program function
   126                                  
   127                                          ;=== THIRD INPUT ====================================================================================
   128                                          ;Prompt user for Speed of 2nd segment
   129 000000FE B800000000                      mov qword rax, 0                            ;Allocate 64 bits of memory on the stack for rax
   130 00000103 50                              push rax                                    ;Set rax to the stack
   131 00000104 48BF-                           mov rdi, prompt3                            ;Move prompt3 into rdi
   131 00000106 [8F00000000000000] 
   132 0000010E E8(00000000)                    call printf                                 ;Print prompt1
   133 00000113 58                              pop rax                                     ;Deallocate memory rax was using
   134                                          
   135                                          ;Read/Store user input (speed2)
   136 00000114 48BF-                           mov rdi, float_format                       ;Move float_format into rdi
   136 00000116 [0300000000000000] 
   137 0000011E 48BE-                           mov rsi, speed2                             ;Move speed2 into rsi
   137 00000120 [0800000000000000] 
   138 00000128 B800000000                      mov qword rax, 0                            ;Allocate 64 bits of memory on the stack for rax
   139 0000012D 50                              push rax                                    ;push rax to the stack
   140 0000012E E8(00000000)                    call scanf                                  ;Grab user input
   141 00000133 58                              pop rax                                     ;Deallocate memory rax was using
   142                                  
   143                                          ;Check for Validity (speed2 < or == 0)
   144 00000134 F20F100425-                     movsd xmm0, qword [speed2]                  ;Move dist1 into xmm0
   144 00000139 [08000000]         
   145 0000013D 660F2E0425-                     ucomisd xmm0, qword [zero]                  ;Check if speed2 > 0
   145 00000142 [CD010000]         
   146 00000146 0F86B4FEFFFF                    jbe stop_program                            ;Jump (if below or equal) to stop_program function
   147                                  
   148                                          ;====================================================================================================
   149                                          ;Breakdown of Register Values
   150                                          ;====================================================================================================
   151                                          ;xmm8 = speed1: Speed of 1st segment (mph)
   152                                          ;xmm9 = dist1: Distance of 1st segment (miles)
   153                                  
   154                                          ;xmm10 = speed2: Speed of 2nd segment (mph)
   155                                          ;xmm11 = dist2: Distance of 2nd segment (miles)
   156                                  
   157                                          ;xmm12 = time1: Time for first segment
   158                                          ;xmm13 = time2: Time for second segment
   159                                          ;xmm14 = total_time: Total time for trip
   160                                          ;xmm15 = avg_speed: Average Speed for Trip
   161                                          ;=====================================================================================================
   162                                  
   163                                          ;Calculate Distance of 2nd segment (dist2)
   164 0000014C F2440F101C25-                   movsd xmm11, qword [total_distance]           ;Move total distance into xmm11
   164 00000152 [0A000000]         
   165 00000156 F2440F100C25-                   movsd xmm9, qword [dist1]                     ;Move dist1 into xmm9
   165 0000015C [10000000]         
   166 00000160 F2450F5CD9                      subsd xmm11, xmm9                             ;dist2 = total_distance - dist1
   167 00000165 F2440F111C25-                   movsd qword [dist2], xmm11                   
   167 0000016B [18000000]         
   168                                  
   169                                          ;=====================================================================================================
   170                                          ;Time = Distance/Speed
   171                                          ;=====================================================================================================
   172                                          ;Calculate time for 1st segment (time1)
   173 0000016F F2440F102425-                   movsd xmm12, qword [dist1]                     ;Move dist1 into xmm12 
   173 00000175 [10000000]         
   174 00000179 F2440F100425-                   movsd xmm8, qword [speed1]                     ;Move speed1 into the xmm8
   174 0000017F [00000000]         
   175 00000183 F2450F5EE0                      divsd xmm12, xmm8                              ;time1 = dist1 / speed1
   176 00000188 F2440F112425-                   movsd qword [time1], xmm12                    
   176 0000018E [20000000]         
   177                                  
   178                                          ;Calculate time for 2nd segment (time2)
   179 00000192 F2440F102C25-                   movsd xmm13, qword [dist2]                     ;Move dist2 into xmm13 
   179 00000198 [18000000]         
   180 0000019C F2440F101425-                   movsd xmm10, qword [speed2]                    ;Move speed2 into the xmm10
   180 000001A2 [08000000]         
   181 000001A6 F2450F5EEA                      divsd xmm13, xmm10                             ;time2 = dist2 / speed2
   182 000001AB F2440F112C25-                   movsd qword [time2], xmm13
   182 000001B1 [28000000]         
   183                                  
   184                                          ;Compute Total Time (total_time)
   185 000001B5 F2440F103425-                   movsd xmm14, qword [time1]                     ;Move time1 into xmm14 
   185 000001BB [20000000]         
   186 000001BF F2440F102C25-                   movsd xmm13, qword [time2]                     ;Move time2 into xmm13
   186 000001C5 [28000000]         
   187 000001C9 F2450F58F5                      addsd xmm14, xmm13                             ;total_time = time1 + time2
   188 000001CE F2440F113425-                   movsd qword [total_time], xmm14
   188 000001D4 [30000000]         
   189                                      
   190                                          ;Compute Average Speed (avg_speed)
   191 000001D8 F2440F103C25-                   movsd xmm15, [total_distance]                  ;Move total_distance into xmm15
   191 000001DE [0A000000]         
   192 000001E2 F2440F103425-                   movsd xmm14, qword [total_time]                ;Move total_time into xmm14
   192 000001E8 [30000000]         
   193 000001EC F2450F5EFE                      divsd xmm15, xmm14                             ;avg_speed = total distance / total_time
   194 000001F1 F2440F113C25-                   movsd qword [avg_speed], xmm15
   194 000001F7 [38000000]         
   195                                          
   196                                          ;Print out Average Speed
   197 000001FB 6A00                            push qword 0                                   
   198 000001FD B801000000                      mov rax, 1
   199 00000202 48BF-                           mov rdi, output1
   199 00000204 [D400000000000000] 
   200 0000020C F20F100425-                     movsd xmm0, qword [avg_speed]
   200 00000211 [38000000]         
   201 00000215 E8(00000000)                    call printf
   202 0000021A 58                              pop rax
   203                                  
   204                                          ;Print out Total time for Trip
   205 0000021B 6A00                            push qword 0                                
   206 0000021D B801000000                      mov rax, 1
   207 00000222 48BF-                           mov rdi, output2
   207 00000224 [F900000000000000] 
   208 0000022C F20F100425-                     movsd xmm0, qword [total_time]
   208 00000231 [30000000]         
   209 00000235 E8(00000000)                    call printf
   210 0000023A 58                              pop rax
   211                                  
   212 0000023B F20F100425-                     movsd xmm0, qword[total_time]
   212 00000240 [30000000]         
   213                                  
   214                                          ;End program
   215 00000244 C3                              ret
   216                                          
